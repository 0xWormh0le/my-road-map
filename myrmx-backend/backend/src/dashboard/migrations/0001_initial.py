# Generated by Django 2.0.5 on 2018-05-22 17:51

import ckeditor.fields
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import embed_video.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('bio', models.TextField(blank=True)),
                ('photo', models.FileField(blank=True, upload_to='images/profiles/')),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('sidebar_list', models.CharField(blank=True, max_length=500, null=True)),
                ('last_downloaded_competencies', models.DateTimeField(blank=True, null=True)),
                ('notes_for_coach', models.TextField(blank=True)),
                ('coach_notes_regarding_student', models.TextField(blank=True)),
                ('coach', models.ManyToManyField(blank=True, limit_choices_to={'groups__name': 'Coach'}, related_name='students', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActionItemAssessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, max_length=200, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('marked_done', models.BooleanField(default=False)),
                ('date_marked_done', models.DateField(blank=True, null=True)),
                ('approved_done', models.BooleanField(default=False)),
                ('date_approved_done', models.DateField(blank=True, null=True)),
                ('archived', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ActionItemGlobal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=200)),
                ('due_date', models.DateField(default=datetime.date(2018, 5, 29))),
                ('date_created', models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Action Item',
                'verbose_name_plural': 'Action Items',
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('1', 'Red'), ('2', 'Yellow'), ('3', 'Green')], default='1', max_length=1)),
                ('date', models.DateField(default=datetime.date.today)),
                ('comment', models.CharField(blank=True, max_length=256)),
                ('approved', models.BooleanField(default=True)),
                ('rejected', models.BooleanField(default=False)),
                ('review_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('signup_url', models.SlugField(blank=True, null=True, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('text', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, null=True)),
                ('logo', models.FileField(blank=True, upload_to='images/company-logos/')),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Competency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, help_text="This is the 'Question?' that's used in the Stage overview", max_length=200)),
                ('red_description', models.CharField(max_length=200)),
                ('yellow_description', models.CharField(max_length=200)),
                ('green_description', models.CharField(max_length=200)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user_defined', models.BooleanField(default=False)),
                ('content', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('video', embed_video.fields.EmbedVideoField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='competency_parent', to='dashboard.Competency')),
            ],
            options={
                'verbose_name_plural': 'Competencies',
            },
        ),
        migrations.CreateModel(
            name='Roadmap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True, max_length=200, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Company')),
            ],
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title should be in the format 'Stage X: What it focues on' ... i.e. 'Stage 1: Learn'.", max_length=64)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('roadmap', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Roadmap')),
            ],
        ),
        migrations.AddField(
            model_name='competency',
            name='stage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Stage'),
        ),
        migrations.AddField(
            model_name='competency',
            name='student',
            field=models.ForeignKey(blank=True, help_text="This is a helper variable, don't change it.", null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='competency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='dashboard.Competency'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cohort',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Company'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='competency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Competency'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='reviewer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assessment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actionitemglobal',
            name='cohort',
            field=models.ManyToManyField(blank=True, help_text='Select specific Cohorts that this Action Item applies to. Or leave blank if it should apply to all Cohorts, including any future Cohorts.', to='dashboard.Cohort'),
        ),
        migrations.AddField(
            model_name='actionitemglobal',
            name='competency',
            field=models.ForeignKey(limit_choices_to={'student': None}, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Competency'),
        ),
        migrations.AddField(
            model_name='actionitemassessment',
            name='competency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Competency'),
        ),
        migrations.AddField(
            model_name='actionitemassessment',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.ActionItemGlobal'),
        ),
        migrations.AddField(
            model_name='actionitemassessment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='cohort',
            field=models.ManyToManyField(blank=True, help_text='Students should only be in ONE group. Mentor can be in multiple groups.', related_name='users', to='dashboard.Cohort'),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='mentors',
            field=models.ManyToManyField(blank=True, limit_choices_to={'groups__name': 'Mentor'}, related_name='_user_mentors_+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='roadmap',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Roadmap'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
